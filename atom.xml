<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marina的所思所想</title>
  <icon>https://www.gravatar.com/avatar/4c79ae7b8815420b6f7c96fec636a7bc</icon>
  <subtitle>Shall I compare thee to a summer&#39;s day?</subtitle>
  <link href="https://inchinaxiaofeng.github.io/atom.xml" rel="self"/>
  
  <link href="https://inchinaxiaofeng.github.io/"/>
  <updated>2025-01-12T04:24:39.901Z</updated>
  <id>https://inchinaxiaofeng.github.io/</id>
  
  <author>
    <name>Marina TOO</name>
    <email>inchinaxiaofeng@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手撕SO文件</title>
    <link href="https://inchinaxiaofeng.github.io/2025/01/12/%E6%89%8B%E6%92%95SO%E6%96%87%E4%BB%B6/"/>
    <id>https://inchinaxiaofeng.github.io/2025/01/12/%E6%89%8B%E6%92%95SO%E6%96%87%E4%BB%B6/</id>
    <published>2025-01-12T04:23:42.000Z</published>
    <updated>2025-01-12T04:24:39.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-问题的提出与总目标"><a href="#0-问题的提出与总目标" class="headerlink" title="0. 问题的提出与总目标"></a>0. 问题的提出与总目标</h1><p>在为ArceOS实现动态加载的时候，同组的一个同学贡献了这样的思路：直接在Rust中实现对应的库，然后在load的过程中，将函数直接复制到rela指出的位置。我的思路是希望通过直接加载so文件，实现对动态链接的支持。</p><h1 id="1-静态链接与动态链接概念的简单区分"><a href="#1-静态链接与动态链接概念的简单区分" class="headerlink" title="1. 静态链接与动态链接概念的简单区分"></a>1. 静态链接与动态链接概念的简单区分</h1><p>静态链接是将所有第三方库函数全部打包到了一个可执行文件中，其体积较大，加载简单，其使用的库常用名称是<code>*.a</code>，是通过<code>ar</code>构建的；<br>动态链接不链接库文件，而是在运行时去加载，体积小，实现复杂，其使用的库常用名称为<code>*.so</code>，通过<code>gcc</code>类编译器构建的。</p><p>我们把编译后但是还未链接的二进制机器码文件称为目标文件（Object File），那些第三方库是其他人编译打包好的目标文件，这些库里面包含了一些函数，我们可以直接调用而不用自己动手写一遍。在编译构建自己的可执行文件时，使用静态链接的方式，其实就是将所需的静态库与目标文件打包到一起。最终的可执行文件除了有自己的程序外，还包含了这些第三方的静态库，可执行文件比较臃肿。</p><p>动态链接不将所有的第三方库都打包到最终的可执行文件上，而是只记录用到了哪些动态链接库，在运行时才将那些第三方库装载（Load）进来。装载是指将磁盘上的程序和数据加载到内存上。</p><blockquote><p>注意的是，不同操作系统的动态链接库格式不同，linux的是共享目标文件（Shared Object）<code>.so</code>，windows的是动态链接库（Dynamic Link Library）<code>.dll</code></p></blockquote><h1 id="2-位置无关码PIC的原理、动态链接库、代码重定位"><a href="#2-位置无关码PIC的原理、动态链接库、代码重定位" class="headerlink" title="2. 位置无关码PIC的原理、动态链接库、代码重定位"></a>2. 位置无关码PIC的原理、动态链接库、代码重定位</h1><p>问题：动态链接库在编译时并未确定其在内存中的具体位置，而是在运行时加载，因此必须进行加载时重定位。</p><p>NOTE!: 本节参考文章：<a href="https://blog.csdn.net/tilblackout/article/details/135585340">https://blog.csdn.net/tilblackout/article/details/135585340</a></p><h2 id="1-位置无关的编译器选项"><a href="#1-位置无关的编译器选项" class="headerlink" title="1. 位置无关的编译器选项"></a>1. 位置无关的编译器选项</h2><p>这四个编译选项与位置无关代码(Position Independent Code，PIC)和位置无关可执行文件(Position Independent Executable，PIE)有关。它们的作用主要是为了提高代码的可重定位性，使得代码更适用于共享库和在内存中的不同位置加载的情况：</p><ol><li><code>-fPIC(Position Independent Code)</code><ul><li><strong>作用：</strong>生成位置无关代码，适用于共享库。</li><li><strong>用途：</strong>当编译共享库时，通常需要使用<code>-fPIC</code>，以确保库中代码可以在内存中的不同位置加载。</li></ul></li><li><code>-fPIE(Position Independent Executable)</code><ul><li><strong>作用：</strong> 生成位置无关的可执行文件，适用于可执行文件。</li><li><strong>用途：</strong> 当编译可执行文件时，使用<code>-fPIE</code>会生成一个可以在内存中的不同位置加载的可执行文件。</li></ul></li><li><code>-pie(Position Independent Executable)</code><ul><li><strong>作用：</strong> 生成位置无关的可执行文件，与<code>-fPIE</code>类似。</li><li><strong>用途：</strong> 在链接阶段，使用<code>-pie</code>可以生成位置无关的可执行文件，这也是为了提高安全性。与 <code>-fPIE</code> 不同的是，<code>-pie</code>在链接时指定，而不是在编译时。</li></ul></li><li><code>-fno-pic</code><ul><li><strong>作用：</strong> 禁用位置无关代码。</li><li><strong>用途：</strong> 当不需要位置无关代码时，使用<code>-fno-pic</code>禁用，生成与地址相关的代码。</li></ul></li></ol><h2 id="2-加载动态链接库"><a href="#2-加载动态链接库" class="headerlink" title="2. 加载动态链接库"></a>2. 加载动态链接库</h2><h3 id="2-1-问题引入"><a href="#2-1-问题引入" class="headerlink" title="2.1. 问题引入"></a>2.1. 问题引入</h3><p>构建动态链接库的时候，链接器事先无法知道任何给定共享库将在进程的虚拟内存中的哪个位置加载。这个问题的解决方法视操作系统不同而不同，这里以Linux为例来讲解一个实现的思路。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> test = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test += a;</span><br><span class="line">    <span class="keyword">return</span> test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码编译成动态链接库后，涉及到用<code>mov</code>指令将全局变量<code>test</code>的值从内存的位置取到寄存器中。但是<code>mov</code>指令需要<strong>绝对地址</strong>，而动态库是没有预定义的加载地址，所以这个地址将在运行时确定。</p><p>LinuxELF共享库中，主要有两个解决这个问题的方法：加载时重定位和位置无关代码。</p><h3 id="2-2-加载时重定位（Load-time-relocation）"><a href="#2-2-加载时重定位（Load-time-relocation）" class="headerlink" title="2.2. 加载时重定位（Load-time relocation）"></a>2.2. 加载时重定位（Load-time relocation）</h3><ul><li><strong>实时性：</strong> 在加载时进行地址重定位，即在将共享库加载到进程的地址空间时，需要根据实际的加载地址对库中的数据和代码引用进行修正。这就是为什么称之为“加载时”重定位。</li><li><strong>非位置无关：</strong> 共享库中的代码和数据引用是使用绝对地址的，因此必须在加载时将这些地址调整为实际的加载地址。</li></ul><p>存在的问题：</p><ol><li>性能问题<br> 当一个应用程序加载与加载时重定位条目关联的共享库时，尽管只需加载重定位的条目，但如果一个复杂的软件在启动时加载多个大型共享库，并且每个库都需要进行加载时重定位，会导致应用程序启动时间明显延迟。</li><li>代码段无法共享<br> 共享库的初衷之一是为了节省RAM，使得一些常见的共享库能够被多个应用程序共享。这意味着对于每个应用程序，共享库都必须完全加载到内存中，导致相当大量的RAM浪费。</li><li>要求代码段可写<br> 为了允许在加载时动态地修改其中的绝对地址，将其调整为实际的加载地址，加载时重定位要求代码段保持可写状态，这带来了潜在的代码安全风险。</li></ol><p>对于加载时重定位这种方法，实际上已经过时了，甚至最新的编译器已经不支持这种方法。PIC是目前常见的解决方案，接下来我们就深入讨论一下位置无关代码。</p><h2 id="3-位置无关代码（Position-Independent-Code）"><a href="#3-位置无关代码（Position-Independent-Code）" class="headerlink" title="3. 位置无关代码（Position Independent Code）"></a>3. 位置无关代码（Position Independent Code）</h2><p>PIC的原理很简单：在代码中对所有全局数据和函数引用添加一个额外的中间层。通过巧妙地利用链接和加载过程中的结果，使共享库的代码部分实现位置无关。</p><h3 id="3-1-代码段和数据段之间的偏移"><a href="#3-1-代码段和数据段之间的偏移" class="headerlink" title="3.1.  代码段和数据段之间的偏移"></a>3.1.  代码段和数据段之间的偏移</h3><p>PIC的一个关键点是利用链接时已知的代码段和数据段之间的偏移。当链接器合并多个目标文件时，它会整合它们的各个部分，形成一个大的代码段。因此，链接器了解各个部分的大小和它们的相对位置。</p><p>举例来说，代码段可能直接跟在数据部分后面，这意味着从代码部分中的任意指令到数据段开头的偏移量等于代码部分的大小减去指令距离代码部分开头的偏移量。这两个量都是链接器已知的。</p><p>当然，其实在代码段和数据段之间有别的段，或者两个段的位置关系不是如此，都不影响链接器<strong>知晓</strong>它们的位置，并了解到所有段的大小。</p><h3 id="3-2-全局偏移表（Global-Offset-Table）"><a href="#3-2-全局偏移表（Global-Offset-Table）" class="headerlink" title="3.2. 全局偏移表（Global Offset Table）"></a>3.2. 全局偏移表（Global Offset Table）</h3><p>全局偏移表<code>GOT</code>可以帮我们实现位置无关数据寻址。实际上<code>GOT</code>就是一个地址表，存储在数据段中。假设代码段中的某个指令想要引用一个变量。<strong>它会引用<code>GOT</code>中的一个条目，而不是直接使用绝对地址引用(这将需要进行重定位)。</strong>由于<code>GOT</code>位于数据段的一个已知位置，这个引用是<strong>相对的</strong>，并且在链接器中是<strong>已知的</strong>，而<code>GOT</code>条目本身将包含变量的<strong>绝对地址</strong>。</p><p>通过将变量引用重定向到GOT，我们避免了在代码段中直接使用绝对地址，而是通过GOT中的条目进行引用，从而减少了需要在加载时进行的具体地址修正。但是，我们在数据段中引入了一个新的重定位，因为全局偏移表仍然需要包含变量的绝对地址。那么，这样做的优点有哪些呢？</p><ul><li>加载时重定位需要对每个变量的引用都进行重定位，而在全局偏移表中，只需要对每个变量进行一次重定位</li><li>数据段是可写的，并且在进程之间不共享</li></ul><p>实际上这就是解决前面提到的加载时重定位的三个缺点。</p><p> ==这里我们需要重点关注的是==：<strong>Linux的动态链接器如何在运行时对全局偏移表进行修改</strong>。我们将通过了解这个内容，获得在ArceOS中直接加载SO文件的必要知识。</p><h3 id="3-3-函数的重定位"><a href="#3-3-函数的重定位" class="headerlink" title="3.3. 函数的重定位"></a>3.3. 函数的重定位</h3><p>前面介绍的是全局变量的重定位，对于函数也需要重定位，它有着另一种机制：懒绑定。</p><p>当共享库引用某个函数时，函数的真实地址在加载时未知。为了加速这个过程，引入了过程链接表(PLT)。PLT包含对函数进行间接调用的代码，而不是直接包含函数地址。在程序执行时，当函数首次调用时，PLT代码负责将函数的真实地址填充到全局偏移表(GOT)中的相应条目。此后的调用直接通过GOT访问函数地址，避免了每个函数调用时的绑定延迟。这种机制减少了不必要的解析工作，提高了程序执行效率。</p><p>==这里我们可以知道==：存在某种方式，能够让我们在ArceOS中进行函数重定位。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>至此解释了什么是位置无关代码，以及它如何帮助创建具有可共享只读文本段的共享库。位置无关代码(PIC)通过引入全局偏移表(GOT)和过程链接表(PLT)实现，解决了共享库加载时的重定位问题。GOT提供了数据和函数的间接引用，PLT实现了懒绑定，推迟函数地址的解析。当然这也伴随额外的内存加载和寄存器使用成本，但在权衡之下，现代的编译器都更倾向于使用PIC。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-问题的提出与总目标&quot;&gt;&lt;a href=&quot;#0-问题的提出与总目标&quot; class=&quot;headerlink&quot; title=&quot;0. 问题的提出与总目标&quot;&gt;&lt;/a&gt;0. 问题的提出与总目标&lt;/h1&gt;&lt;p&gt;在为ArceOS实现动态加载的时候，同组的一个同学贡献了这样的思</summary>
      
    
    
    
    
    <category term="ArceOS开发日记" scheme="https://inchinaxiaofeng.github.io/tags/ArceOS%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/"/>
    
    <category term="Linux" scheme="https://inchinaxiaofeng.github.io/tags/Linux/"/>
    
    <category term="动态加载" scheme="https://inchinaxiaofeng.github.io/tags/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>通过优化合成层优化性能</title>
    <link href="https://inchinaxiaofeng.github.io/2021/09/04/%E9%80%9A%E8%BF%87%E5%8E%8B%E7%BC%A9%E5%90%88%E6%88%90%E5%B1%82%E4%BC%98%E5%8C%96%E6%80%A7%E8%83%BD/"/>
    <id>https://inchinaxiaofeng.github.io/2021/09/04/%E9%80%9A%E8%BF%87%E5%8E%8B%E7%BC%A9%E5%90%88%E6%88%90%E5%B1%82%E4%BC%98%E5%8C%96%E6%80%A7%E8%83%BD/</id>
    <published>2021-09-04T05:15:01.000Z</published>
    <updated>2025-01-12T04:16:16.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Web 性能优化特别是长列表滚动优化是一个老生常谈的问题，一般我们的思路是通过虚拟滚动、GPU 加速、fragment 复用等方式优化性能。</p><p>在本篇文章中，主要介绍一个压缩合成层的思路来进行性能优化，关于合成层的文章网上也有一些（附录部分有列出），不过大部分文章会对合成层创建的原因进行冗长的介绍，本文会跳过这些部分。原因是我们通过 devTools 可以比较方便的针对具体情况分析创建合成层的原因，另外一个原因是 blink 已经把创建合成层的原因写到了一个文件中（<a href="https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/platform/graphics/compositing_reasons.cc">传送门</a>），我们直接参考就行，也没有必要去全都记住。</p><h2 id="合成层是什么"><a href="#合成层是什么" class="headerlink" title="合成层是什么"></a>合成层是什么</h2><p>对于 blink 渲染引擎的渲染流程，大致可以分为以下几个阶段：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D<span class="function"><span class="title">om</span> Tree -&gt;</span> L<span class="function"><span class="title">ayout</span> Object -&gt;</span> P<span class="function"><span class="title">aint</span> Layer -&gt;</span> G<span class="function"><span class="title">raphics</span> Layers Tree -&gt;</span> Paint</span><br></pre></td></tr></table></figure><p>我们对以上过程进行一个简述：</p><ul><li>Dom Tree 到 Render Tree 这个过程，基本是一一对应的，除了一些 display:none 的元素。</li><li>Layout Object 会按照一定条件创建 Paint Layer。</li><li>Paint Layer 在到 Graphics Layer 的过程中，会创建合成层（Composite Layer），会对应独立的 Graphics Layer。</li><li>Graphics Layer 会把结果渲染到纹理，最终通过 Chrome 的渲染层以及系统进行上屏。</li></ul><p>实际上我们可以发现，合成层的多少会比较影响我们的渲染性能，合成层比较多的情况下，当我们对页面进行交互（比如滚动），触发重新渲染，就会有卡顿的风险。</p><h2 id="分析合成层"><a href="#分析合成层" class="headerlink" title="分析合成层"></a>分析合成层</h2><p>Chrome 的 DevTools 工具可以让我们比较方便地进行合成层分析，例如我们通过一个 demo 来进行分析：</p><p><img src="/img/composite_reason.png" alt="合成层示例"></p><p>在上图中，我们会发现这个 demo 的合成层比较多，我们点进去可以查看到是因为 overflow 导致创建了新的合成层。</p><p>也就是说，对该 demo 而言我们可以尝试在这些 Demo 中去掉或者修改 overflow 的相关设置，从而进行合成层优化。</p><h2 id="优化合成层"><a href="#优化合成层" class="headerlink" title="优化合成层"></a>优化合成层</h2><p>我们尝试去掉 <code>overflow: scroll;</code>。（ Demo 源代码会在本文最后给出）</p><p>然后我们设置页面的列表元素为 500 个，通过模拟页面持续滚动，来检查去掉前后的性能。</p><p>去掉前，cpu 保持在 50%+，这实际上已经是一个比较高的数值了：</p><p><img src="/img/composite_cpu_1.png" alt="合成层cpu"></p><p>去掉后，cpu 保持在 2% 左右：</p><p><img src="/img/composite_cpu_2.png" alt="去除合成层cpu"></p><p>我们可以看到，优化后有巨大的性能提升，这种量级的性能提升，会远超虚拟滚动等方案（其实我个人是不建议采用虚拟滚动的，非常难维护，而且你很难做到浏览器原生滚动的丝滑水准）。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>示例代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0,minimal-ui:ios&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> &gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.list</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">90vh</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">overflow</span>: scroll;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.li</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-bottom</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-color</span>: grey;</span></span><br><span class="line"><span class="css">      <span class="comment">/* overflow: scroll; */</span></span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> totalListCount = <span class="number">500</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> list = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.list&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; totalListCount; i += <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> fragment = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">    fragment.classList.add(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    fragment.innerHTML = <span class="string">`&lt;p&gt;this is the <span class="subst">$&#123;i&#125;</span> element&lt;/p&gt;`</span>;</span></span><br><span class="line"><span class="javascript">    list.appendChild(fragment);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> curr = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> renderScroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    curr += <span class="number">5</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (curr &gt;= totalListCount) curr = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    list.children[curr].scrollIntoView();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.requestAnimationFrame(renderScroll)</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript">  renderScroll();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考：</p><ul><li>Compositing Layers: <a href="https://zhuanlan.zhihu.com/p/88288584">https://zhuanlan.zhihu.com/p/88288584</a></li><li>前端性能优化之 Composite: <a href="https://segmentfault.com/a/1190000015917498">https://segmentfault.com/a/1190000015917498</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;Web 性能优化特别是长列表滚动优化是一个老生常谈的问题，一般我们的思路是通过虚拟滚动、GPU 加速、fragment 复用等方式优化性能。</summary>
      
    
    
    
    
    <category term="性能优化" scheme="https://inchinaxiaofeng.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
